import { useEffect, useState } from 'react';
import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import { Input } from "~/components/Input";
import { api } from "~/utils/api";
import playerData from '../../public/playerData.json'

interface Player {
  name: string;
  stats: {
    Points: number;
    Yards: number;
    Targets: number;
    Fumbles: number;
  };
}

export default function Home() {

  const  user  = useUser()
  const {data} = api.moves.getAll.useQuery()
  console.log(user.user?.firstName)

  const [addedPlayer, setAddedPlayer] = useState('');
  const [droppedPlayer, setDroppedPlayer] = useState('');
  const [loading, setLoading] = useState(false)
  const [goodPick, setGoodPick] = useState<boolean | undefined>();
  const [playerNotFound, setPlayerNotFound] = useState('')

  const handlePlayerAdd = (player: string) => {
      setAddedPlayer(player)
  };

  const handlePlayerDrop= (player: string) => {
    setDroppedPlayer(player)
  };

  const handleComparison = (addedPlayer: string, droppedPlayer: string) => {
    setLoading(true)
    setGoodPick(undefined)
    setPlayerNotFound('')
    setTimeout(() => {
    const weeks = Object.keys(playerData);
    const addedPlayerData: object[] = [];
    const droppedPlayerData: object[] = [];
    
  weeks.slice(-4).map((week) => {
  const addedData: ({week: string, data: object}) = {
    week,
    data: playerData[week].find((player: Player) => player.name === addedPlayer)
  };
  const droppedData: ({week: string, data: object}) = {
    week,
    data: playerData[week].find((player: Player) => player.name === droppedPlayer)
  };

  addedPlayerData.push(addedData);
  droppedPlayerData.push(droppedData);
});

if(addedPlayerData[0].data === undefined) {
  setPlayerNotFound(addedPlayer)
  setLoading(false)
} else if (droppedPlayerData[0].data === undefined) {
  setPlayerNotFound(droppedPlayer)
  setLoading(false)
} else {
  addedPlayerData.map(data => console.log(data.data.stats.Targets))

  const evaluation: string = targetsEval(addedPlayerData);
  console.log('Evaluation:', evaluation);
  
  const addedPlayerTotalTargets: number = addedPlayerData.reduce((total: number, week: object) => total + week.data.stats.Targets, 0);
  console.log(addedPlayerTotalTargets)
  const droppedPlayerTotalTargets: number = droppedPlayerData.reduce((total: number, week: any) => total + week.data.stats.Targets, 0);
  console.log(addedPlayerTotalTargets, droppedPlayerTotalTargets)
  const addedPlayerTotalPoints: number = addedPlayerData.reduce((total: number, week: any) => total + week.data.stats.Points, 0);
  const droppedPlayerTotalPoints: number = droppedPlayerData.reduce((total: number, week: any) => total + week.data.stats.Points, 0);
  console.log("Added Player Total Points:", addedPlayerTotalPoints);
  console.log("Dropped Player Total Points:", droppedPlayerTotalPoints);
  
    if (addedPlayerTotalPoints > droppedPlayerTotalPoints) {
      console.log('true')
      setGoodPick(true)
    } else if (addedPlayerTotalPoints < droppedPlayerTotalPoints) {
      console.log('false')
      setGoodPick(false)
    }
    setLoading(false)
}
    }, 3000);

  }

  useEffect(() => {
    if(addedPlayer && droppedPlayer) {
      handleComparison(addedPlayer, droppedPlayer);
    }
  }, [addedPlayer, droppedPlayer]);

  interface PlayerData {
    week: string;
    data: {
      stats: {
        Targets: number;
      };
    };
  }
  
  const targetsEval = (addedPlayerData: PlayerData[]): string => {
    const targets: number[] = addedPlayerData.map(data => data.data.stats.Targets);
  
    // Check if all numbers are greater than the previous number
    const isPerfectScore: boolean = targets.slice(1).every((num, index) => num >= targets[index]);
  
    // Check if all numbers are decreasing from the first number
    const isFailure: boolean = targets.slice(1).every((num, index) => num < targets[index]);
  
    let evaluation = '';
    if (isPerfectScore) {
      evaluation = 'Perfect score!';
    } else if (isFailure) {
      evaluation = 'Failure';
    } else {
      evaluation = 'Medium score';
    }
  
    return evaluation;
  };
  
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className='bg-gradient-to-r from-[#2948ff] to-[#396afc] flex justify-between w-full h-[7%] items-center px-4 shadow-lg'>
        <p className='text-2xl uppercase tracking-wider'>Move Mentor</p>
        <ul className='flex gap-4'>
          <li><a href="">Link 1</a></li>
          <li>
            <div>
              {!user.isSignedIn && <SignInButton />}
              {!!user.isSignedIn && <SignOutButton />}
            </div>
          </li>
        </ul>
      </nav>
      <main className="h-[93%]">
        <div className='text-center flex flex-col items-center '>
          <div>
            <h1 className='text-slate-800 sm:text-6xl text-4xl my-10 tracking-tighter uppercase'>Move Mentor</h1>
            <h2 className='text-slate-800 my-5 sm:text-2xl text-xl tracking-wide'>Level up your fantasy game with Move Mentor's data-driven evaluations</h2>
          </div>
          <div className='my-4 flex'>
            <Input label='added' onChange={handlePlayerAdd} placeholder='Select player added' />
            <Input label='dropped' onChange={handlePlayerDrop} placeholder='Select player dropped' />
          </div>
          {loading && <section><span className="loading"></span></section>}
          {goodPick !==undefined && (
            <div className='flex gap-12 my-5'>
              <h2 className={`p-4 bg-white text-slate-900 text-center ${goodPick ? 'neon-green-border' : 'neon-red-border'}`}>
                Added Player: {addedPlayer}
              </h2>

              <h2 className={`p-4 bg-white text-slate-900 text-center ${goodPick ? 'neon-red-border' : 'neon-green-border'}`}>
                Dropped Player: {droppedPlayer}
              </h2>
            </div>
          )}
          {playerNotFound && (
            <>
            <h2>Data for {playerNotFound} not find. Please try again later or select a new player.</h2>
            </>
          )}
          {/* {data?.map((move) => (<div key={move.id}>{move.addedPlayer}{move.droppedPlayer}</div>))} */}
        </div>
      </main>
    </>
  );
}
